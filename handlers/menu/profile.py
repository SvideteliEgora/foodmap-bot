from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from functions.profile_functions import get_calculate_bzhu, verify_number
from loader import bot, dp, UsersDB
from murkups.profile_markups import create_profile_kb, cancel_create_profile_kb, target_ikb, active_ikb, gender_ikb
from states import ProfileStatesGroup
from murkups.menu_markups import menu_kb


@dp.message_handler(commands=['cancel'], state='*')
async def cmd_cancel(message: types.Message, state: FSMContext) -> None:
    if state is None:
        return

    await state.finish()
    await bot.send_message(chat_id=message.from_user.id,
                           text='–í—ã –ø—Ä–µ—Ä–≤–∞–ª–∏ —Å–∞–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è.',
                           reply_markup=create_profile_kb)


@dp.message_handler(commands=['create'])
async def cmd_create(message: types.Message) -> None:
    await bot.send_message(chat_id=message.from_user.id,
                           text='–í–∞—à–µ –∏–º—è:',
                           reply_markup=cancel_create_profile_kb)
    await ProfileStatesGroup.name.set()
    await message.delete()


# check name
@dp.message_handler(lambda message: not (message.text.isalpha() or len(message.text) >= 15), state=ProfileStatesGroup.name)
async def check_name(message: types.Message) -> None:
    await bot.send_message(chat_id=message.from_user.id,
                           text='<em>–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</em>\n'
                                '–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –≤ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–µ –Ω–µ –±–æ–ª—å—à–µ 15.')
    await message.delete()


# load name, next age
@dp.message_handler(state=ProfileStatesGroup.name)
async def load_name(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['name'] = message.text.title()

    await ProfileStatesGroup.next()
    await bot.send_message(chat_id=message.from_user.id,
                           text="–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?\n\n",
                           parse_mode='HTML')
    await message.delete()


# check age
@dp.message_handler(lambda message: not message.text.isdigit(), state=ProfileStatesGroup.age)
async def check_age(message: types.Message) -> None:
    await bot.send_message(chat_id=message.from_user.id,
                           text='<em>–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.</em>\n\n'
                                '–í–∞–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç).\n'
                                '–≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å <b>—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ</b>, –Ω–µ –º–µ–Ω—å—à–µ 8',
                           parse_mode='HTML')
    await message.delete()


# load age, next weight
@dp.message_handler(state=ProfileStatesGroup.age)
async def load_age(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['age'] = int(message.text)

    await ProfileStatesGroup.next()
    await bot.send_message(chat_id=message.from_user.id,
                           text='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å <em>(–∫–≥)</em>:',
                           parse_mode='HTML')
    await message.delete()


# check weight
@dp.message_handler(lambda message: not verify_number(message.text), state=ProfileStatesGroup.weight)
async def check_weight(message: types.Message) -> None:
    await bot.send_message(chat_id=message.from_user.id,
                           text='<em>–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</em>\n\n'
                                '–í–∞–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –≤–µ—Å <em>(–∫–≥)</em>.'
                                '–≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å <b>—Ü–µ–ª–æ–µ (75)</b> –∏–ª–∏ <b>–¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ (75.5)</b>',
                           parse_mode='HTML')
    await message.delete()


# load weight, next height
@dp.message_handler(state=ProfileStatesGroup.weight)
async def load_weight(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        if message.text.isdigit():
            data['weight'] = int(message.text)
        else:
            data['weight'] = round(float(message.text))

    await ProfileStatesGroup.next()
    await bot.send_message(chat_id=message.from_user.id,
                           text='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç <em>(—Å–º)</em>:',
                           parse_mode='HTML')
    await message.delete()


# check height
@dp.message_handler(lambda message: not verify_number(message.text), state=ProfileStatesGroup.height)
async def check_height(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text='<em>–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</em>\n\n'
                                '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç. –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å <b>—Ü–µ–ª–æ–µ (75)</b> –∏–ª–∏ <b>–¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ (75.5)</b>',
                           parse_mode='HTML')
    await message.delete()


# load height, next gender
@dp.message_handler(state=ProfileStatesGroup.height)
async def load_height(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        if message.text.isdigit():
            data['height'] = int(message.text)
        else:
            data['height'] = round(float(message.text))

    await ProfileStatesGroup.next()
    await bot.send_message(chat_id=message.from_user.id,
                           text="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
                           reply_markup=gender_ikb)
    await message.delete()


# check gender
@dp.message_handler(state=ProfileStatesGroup.gender)
async def check_gender(message: types.Message) -> None:
    await message.delete()


# load gender
@dp.callback_query_handler(state=ProfileStatesGroup.gender)
async def load_gender(callback: types.CallbackQuery, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['gender'] = callback.data

    await ProfileStatesGroup.next()
    await callback.message.edit_text(text="–ö–∞–∫–∞—è —É –≤–∞—Å —Ü–µ–ª—å?\n\n"
                                          "–≤—ã–±–µ—Ä–µ—Ç–µ –æ—Ç–≤–µ—Ç:",
                                     reply_markup=target_ikb)


# check target
@dp.message_handler(state=ProfileStatesGroup.target)
async def check_target(message: types.Message) -> None:
    await message.delete()


# load target, next active
@dp.callback_query_handler(state=ProfileStatesGroup.target)
async def load_target(callback: types.CallbackQuery, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['target'] = callback.data
    await ProfileStatesGroup.next()
    await callback.message.edit_text(text="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n\n"
                                          "1. –ù–∏–∫–∞–∫–∏—Ö —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫\n"
                                          "2. –§–∏–∑–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ 1-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é\n"
                                          "3. –§–∏–∑–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ 3-5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é\n"
                                          "4. –§–∏–∑–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ 6-7 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é\n"
                                          "5. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ –¥–µ–Ω—å\n",
                                     parse_mode='HTML',
                                     reply_markup=active_ikb)


# check active
@dp.message_handler(state=ProfileStatesGroup.active)
async def check_target(message: types.Message) -> None:
    await message.delete()


#load active
@dp.callback_query_handler(state=ProfileStatesGroup.active)
async def load_active(callback: types.CallbackQuery, state: FSMContext) -> None:
    activity_levels = {
        "no_activity": "–ù–∏–∫–∞–∫–∏—Ö —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫",
        "light_activity": "–§–∏–∑–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ 1-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é",
        "moderate_activity": "–§–∏–∑–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ 3-5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é",
        "heavy_activity": "–§–∏–∑–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ 6-7 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é",
        "very_heavy_activity": "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ –¥–µ–Ω—å",
    }
    async with state.proxy() as data:
        data['active'] = activity_levels[callback.data]
    calories, pfc = get_calculate_bzhu(weight=data['weight'], height=data['height'], age=data['age'],
                                       active=data['active'], gender=data['gender'], target=data['target'])
    UsersDB.add_user(user_id=callback.from_user.id, data=data)
    await state.finish()
    await callback.message.edit_text(text='–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
    await callback.message.answer(text=f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
                                f"<em>–ò–º—è</em>: <b>{data['name']}</b>\n"
                                f"<em>–ü–æ–ª</em>: <b>{data['gender']}</b>\n"
                                f"<em>–í–æ–∑—Ä–∞—Å—Ç</em>: <b>{data['age']} –ª–µ—Ç</b>\n"
                                f"<em>–í–µ—Å</em>: <b>{data['weight']} –∫–≥</b>\n"
                                f"<em>–†–æ—Å—Ç</em>: <b>{data['height']} —Å–º</b>\n"
                                f"<em>–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</em>: <b>{data['active']}</b>\n"
                                f"<em>–¶–µ–ª—å</em>: <b>{data['target']}</b>\n\n"
                                f"<em>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ </em>: <b>{calories} –∫–∫–∞–ª</b>\n"
                                f"<em>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ–±—ä–µ–º –≤–æ–¥—ã</em>: <b>... –º–ª</b>\n"
                                f"<em>–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ë–ñ–£</em>: <b>30/30/40</b>",
                           parse_mode='HTML',
                           reply_markup=menu_kb)


@dp.message_handler(Text(equals="–ü—Ä–æ—Ñ–∏–ª—å üë§"))
async def profile(message: types.Message):
    user_profile = UsersDB.get_user_profile(message.from_user.id)

    data = {
        'name': user_profile[1],
        'gender': user_profile[2],
        'age': user_profile[3],
        'weight': user_profile[4],
        'height': user_profile[5],
        'active': user_profile[6],
        'target': user_profile[7]
    }

    await message.answer(text=f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
                                f"<em>–ò–º—è</em>: <b>{data['name']}</b>\n"
                                f"<em>–ü–æ–ª</em>: <b>{data['gender']}</b>\n"
                                f"<em>–í–æ–∑—Ä–∞—Å—Ç</em>: <b>{data['age']} –ª–µ—Ç</b>\n"
                                f"<em>–í–µ—Å</em>: <b>{data['weight']} –∫–≥</b>\n"
                                f"<em>–†–æ—Å—Ç</em>: <b>{data['height']} —Å–º</b>\n"
                                f"<em>–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</em>: <b>{data['active']}</b>\n"
                                f"<em>–¶–µ–ª—å</em>: <b>{data['target']}</b>\n\n"
                                f"<em>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ </em>: <b>/// –∫–∫–∞–ª</b>\n"
                                f"<em>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ–±—ä–µ–º –≤–æ–¥—ã</em>: <b>... –º–ª</b>\n"
                                f"<em>–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ë–ñ–£</em>: <b>30/30/40</b>",
                           parse_mode='HTML',
                           reply_markup=menu_kb)

    await message.delete()